name: SignCode Remote

permissions:
  id-token: write
  contents: read

on:
  workflow_call:

jobs:
  sign_scripts:
    name: Sign PowerShell scripts, commit to branch and publish as artifacts
    runs-on: windows-latest

    steps:
      # Check out repository
      - name: Checkout the Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
        
      # Install AzureSignTool
      - name: Install AzureSignTool
        run: dotnet tool install --global AzureSignTool
        
      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AzureKeyVaultClientId }}
          tenant-id: ${{ secrets.AzureKeyVaultTenant }}
          subscription-id: ${{ secrets.AzureSubscriptionId }}

      # Collect PowerShell scripts and sign.
      - name: Sign Changed PowerShell Scripts
        shell: powershell
        run: |
          Write-Host ${{github.event.pull_request.user.login}}
          $secretVar = az keyvault secret show --id ${{ secrets.AzureKeyVaultSecretID }} --query value -o tsv
          #Get differences between last commit and this one.
          $diff = git diff --name-only --diff-filter=AMR ${{github.event.before}} ${{github.sha}}
          #Only add .ps1 files to FileToSign.txt
          $diff | Where-Object {$_ -match '.ps1$' } | Add-Content FilesToSign.txt
          
          #Check FilesToSign.txt contains some files to sign.
          If (Get-Content FilesToSign.txt -ErrorAction SilentlyContinue)
          {
            try 
            {
              # Use AzureSignTool to sign the files in FilesToSign.txt
              & AzureSignTool sign -kvt "${{ secrets.AzureKeyVaultTenant }}" -kvu "${{ secrets.AzureKeyVaultUrl }}" -kvi "${{ secrets.AzureKeyVaultClientId }}" -kvs $secretVar -kvc "${{ secrets.AzureCertName }}" -tr http://timestamp.digicert.com -v -ifl FilesToSign.txt
            }
            catch
            {
              Write-Error $_
            }
          }
          
      #Grab all the signed files and move them to folder ready for artifact upload.
      - name: Gather Signed Code
        shell: powershell
        run: |
          $signedCode = Get-Content -Path FilesToSign.txt -ErrorAction SilentlyContinue
          
          if ($signedCode)
          {
            New-Item -Path 'SignedCodeDownload' -ItemType Directory
            ForEach($file in $signedCode)
            {
              Move-Item -Path $file -Destination "$env:GITHUB_WORKSPACE\SignedCodeDownload\"
            }
          }
        
              # Runs a single command using the runners shell
      - name: API Test
        
        shell: powershell
        run: |
            
            
           
        
      # Send emails.
      - name: Send Emails
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: powershell
        run: |
          $pullRequest = gh api -H "Accept: application/vnd.github+json" --method GET repos/${{ github.repository }}/pulls -F per_page=50 -f sort=created -f direction=desc -f state=closed | ConvertFrom-Json
          $requester = $parsed_json | Where-Object {$_.merge_commit_sha -eq "${{github.sha}}"}
          $user = gh api -H "Accept: application/vnd.github+json" --method GET users/$requester.user.login | ConvertFrom-Json
          $emailAddress = $user.email
          
          $clientSecret = az keyvault secret show --id ${{ secrets.AzureKeyVaultSecretID }} --query value -o tsv
          $tenantID = "${{ secrets.AzureKeyVaultTenant }}"
          $clientID = "${{ secrets.AZUREKEYVAULTCLIENTID }}"
    
          $tokenBody = @{
    
          Grant_Type    = 'client_credentials'
          Scope         = 'https://graph.microsoft.com/.default'
          Client_Id     = "${{ secrets.AZUREKEYVAULTCLIENTID }}"
          Client_Secret = $clientSecret
          }
    
          $tokenResponse = Invoke-RestMethod -Uri "https://login.microsoftonline.com/$tenantID/oauth2/v2.0/token" -Method POST -Body $tokenBody -ErrorAction Stop
    
          $headers = @{
    
              "Authorization" = "Bearer $($tokenResponse.access_token)"
               "Content-Type"  = "application/json"
          }

          $MsgFrom = "AdeleV@l8qp.onmicrosoft.com"

            $MsgSubject = "Code Signing Completed"

            $MessageParams = @{
                "URI"         = "https://graph.microsoft.com/v1.0/users/$MsgFrom/sendMail"
                    "Headers"     = $headers
                "Method"      = "POST"
                "ContentType" = 'application/json'
                "Body" = (@{
                            "message" = @{
                                        "subject" = $MsgSubject
                                        "body"    = @{
                                        "contentType" = 'HTML' 
                                        "content"     = "<p><b>Your code has been signed.</b></p>" 
                                        }
                            "toRecipients" = @(
                                            @{
                                                "emailAddress" = @{"address" = $emailAddress }
                                            })        
                                        }
                }) | ConvertTo-JSON -Depth 6
           }   
           # Send the message
           Invoke-RestMethod @Messageparams
          
      # Publish the signed .ps1 files as an artifact.
      - name: Publish artifacts
        uses: actions/upload-artifact@v3
        with:
          name: SignedCode
          path: ${{ github.workspace }}\SignedCodeDownload\*
          if-no-files-found: ignore
