name: SignCode Remote

permissions:
  id-token: write
  contents: read

on:
  workflow_call

jobs:
  sign_scripts:
    name: Sign PowerShell scripts, commit to branch and publish as artifacts
    runs-on: windows-latest

    steps:
      # Check out repository
      - name: Checkout the Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
        
      # Install AzureSignTool
      #- name: Install AzureSignTool
      #  run: dotnet tool install --global AzureSignTool
        
      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AzureKeyVaultClientId }}
          tenant-id: ${{ secrets.AzureKeyVaultTenant }}
          subscription-id: ${{ secrets.AzureSubscriptionId }}

      # Collect PowerShell scripts and sign.
      - name: Sign Changed PowerShell Scripts
        shell: powershell
        run: |
          $email = git log -n 1 --pretty=format:%ae
          Write-Host $email
          $secretVar = az keyvault secret show --id ${{ secrets.AzureKeyVaultSecretID }} --query value -o tsv
          #Get differences between last commit and this one.
          $diff = git diff --name-only --diff-filter=AMR ${{github.event.before}} ${{github.sha}}
          #Only add .ps1 files to FileToSign.txt
          $diff | Where-Object {$_ -match '.ps1$' } | Add-Content FilesToSign.txt
          
          #Check FilesToSign.txt contains some files to sign.
          If (Get-Content FilesToSign.txt -ErrorAction SilentlyContinue)
          {
            try 
            {
              # Use AzureSignTool to sign the files in FilesToSign.txt
              #& AzureSignTool sign -kvt "${{ secrets.AzureKeyVaultTenant }}" -kvu "${{ secrets.AzureKeyVaultUrl }}" -kvi "${{ secrets.AzureKeyVaultClientId }}" -kvs $secretVar -kvc "${{ secrets.AzureCertName }}" -tr http://timestamp.digicert.com -v -ifl FilesToSign.txt
            }
            catch
            {
              Write-Error $_
            }
          }
          
      #Grab all the signed files and move them to folder ready for artifact upload.
      - name: Gather Signed Code
        shell: powershell
        run: |
          $signedCode = Get-Content -Path FilesToSign.txt -ErrorAction SilentlyContinue
          
          if ($signedCode)
          {
            New-Item -Path 'SignedCodeDownload' -ItemType Directory
            ForEach($file in $signedCode)
            {
              Move-Item -Path $file -Destination "$env:GITHUB_WORKSPACE\SignedCodeDownload\"
            }
          }
          
      # Publish the signed .ps1 files as an artifact.
      - name: Publish artifacts
        uses: actions/upload-artifact@v3
        with:
          name: SignedCode
          path: ${{ github.workspace }}/SignedCodeDownload/*
          if-no-files-found: ignore
